{"version":3,"sources":["firebaseConfig.js"],"names":["_app","require","_auth","_firestore","appId","measurementId","authDomain","projectId","storageBucket","messagingSenderId","app","initializeApp","auth","console","error","db","getFirestore","setPersistence","browserSessionPersistence","initializeFirestore","testQuery","regeneratorRuntime","async","_context","prev","next","query","collection","where","awrap","getDocs","log","abrupt","t0","message","stop","getCurrentUser","Promise","resolve","reject","unsubscribe","onAuthStateChanged","user","userDoc","userData","basicUserData","_context2","getDoc","doc","uid","sent","exists","data","updateDoc","Date","toISOString","warn","_objectSpread","email","role","emailVerified","createdAt","setDoc","t1","t2","signOut","lastLogin","approved","_context3","resendVerificationEmail","_context4","Error","updateUserProfile","userId","userRef","_context5","updatedAt","success","checkEmailExists","usersRef","q","querySnapshot","_context6","signOutUser","empty","_context7","size","checkAdminRegistrationStatus","emailCheckQ","adminQ","adminSnapshot","_context8","canRegister","checkCourseHasRep","course","_context9","docSnap","endsWith","includes","isValidStudentEmail","RegExp","concat","test","getAdminCount","adminQuery","_context10","checkClassRepExists","classRepQuery","classRepSnapshot","_context11","department","adminCount","_context12","valid","countUsersByRole","createNewUser","password","adminStatus","userCredential","errorMessage","_context13","createUserWithEmailAndPassword","code","basicProfile","_context14","signInWithEmailAndPassword","isValidLecturerEmail","studentEmailRegex","ensureCollectionExists","collectionName","docRef","_context15","dummy","getLecturerTimetable","lecturerEmail","timetableRef","classes","_context16","validateEmailByRole","forEach","push","id","getCourseTimetable","_context17","getDepartmentTimetable","_context18","subscribeLecturerTimetable","classRepExists","onSnapshot","classRepPattern","callback","userType","userIdentifier","today","startOfDay","endOfDay","_context19","setHours","emailExists","addClassToTimetable","classData","_i","_requiredFields","field","finalClassData","_context20","length","endOfWeek","endOfWeekString","_context21","setDate","getDate","signInUser"],"mappings":"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","file":"firebaseConfig.min.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { \r\n  getAuth, \r\n  setPersistence, \r\n  browserSessionPersistence,\r\n  onAuthStateChanged,\r\n  sendEmailVerification,\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n  signOut\r\n} from \"firebase/auth\";\r\nimport { \r\n  getFirestore, \r\n  collection, \r\n  query, \r\n  where, \r\n  getDocs, \r\n  doc,\r\n  getDoc,\r\n  setDoc,\r\n  updateDoc,\r\n  serverTimestamp,\r\n  onSnapshot\r\n} from \"firebase/firestore\";\r\n\r\n// Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAwruoIL8WpN7AzgAmNTW8ZYcZZny1qZs0\",\r\n  authDomain: \"tumcalendar-75b52.firebaseapp.com\",\r\n  projectId: \"tumcalendar-75b52\",\r\n  storageBucket: \"tumcalendar-75b52.appspot.com\",\r\n  messagingSenderId: \"606128397684\",\r\n  appId: \"1:606128397684:web:0fc57fde30a1cd2d1ee021\",\r\n  measurementId: \"G-5C1KWE2HH6\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst auth = getAuth(app);\r\nconst db = getFirestore(app);\r\n\r\n// Set authentication persistence to session\r\nsetPersistence(auth, browserSessionPersistence)\r\n  .catch((error) => {\r\n    console.error(\"Firebase persistence error:\", error);\r\n  });\r\n\r\n// Check if Firestore users collection exists and create it if needed\r\nconst initializeFirestore = async () => {\r\n  try {\r\n    // Try to get a sample user document to check if collection exists\r\n    const testQuery = query(collection(db, \"users\"), where(\"role\", \"==\", \"admin\"));\r\n    await getDocs(testQuery);\r\n    console.log(\"Firestore users collection is ready\");\r\n    return true;\r\n  } catch (error) {\r\n    console.log(\"Initializing Firestore connection:\", error.message);\r\n    // Don't treat this as an error since it might be first-time setup\r\n    // or security rules not allowing unauthenticated queries\r\n    return false;\r\n  }\r\n};\r\n\r\n// Initialize Firestore on app load\r\ninitializeFirestore();\r\n\r\n// Check user authentication status and Firestore profile with enhanced error handling\r\nconst getCurrentUser = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n      unsubscribe();\r\n      if (user) {\r\n        try {\r\n          // Get user profile from Firestore\r\n          const userDoc = await getDoc(doc(db, \"users\", user.uid));\r\n          \r\n          if (userDoc.exists()) {\r\n            // Combine auth user with Firestore data\r\n            const userData = userDoc.data();\r\n            console.log(\"User data retrieved from Firestore:\", userData);\r\n            \r\n            // Update last login timestamp\r\n            try {\r\n              await updateDoc(doc(db, \"users\", user.uid), {\r\n                lastLogin: new Date().toISOString()\r\n              });\r\n            } catch (updateError) {\r\n              console.warn(\"Could not update last login time:\", updateError);\r\n            }\r\n            \r\n            resolve({\r\n              ...user,\r\n              ...userData\r\n            });\r\n          } else {\r\n            console.warn(\"User exists in Auth but not in Firestore. Creating Firestore record...\");\r\n            \r\n            // Auto-create missing user document in Firestore\r\n            try {\r\n              const basicUserData = {\r\n                email: user.email,\r\n                role: \"unknown\", // Default role\r\n                emailVerified: user.emailVerified,\r\n                createdAt: new Date().toISOString(),\r\n                lastLogin: new Date().toISOString(),\r\n                approved: false // Default to unapproved\r\n              };\r\n              \r\n              await setDoc(doc(db, \"users\", user.uid), basicUserData);\r\n              console.log(\"Created missing user document in Firestore\");\r\n              \r\n              resolve({\r\n                ...user,\r\n                ...basicUserData\r\n              });\r\n            } catch (createError) {\r\n              console.error(\"Failed to create missing user document:\", createError);\r\n              resolve(user);\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error getting user profile:\", error);\r\n          resolve(user);\r\n        }\r\n      } else {\r\n        resolve(null);\r\n      }\r\n    }, reject);\r\n  });\r\n};\r\n\r\n// Sign out user\r\nconst signOutUser = async () => {\r\n  try {\r\n    await signOut(auth);\r\n    return { success: true, message: \"Logged out successfully\" };\r\n  } catch (error) {\r\n    console.error(\"Error signing out:\", error);\r\n    return { success: false, error: error.message };\r\n  }\r\n};\r\n\r\n// Helper function to resend verification email\r\nconst resendVerificationEmail = async (user) => {\r\n  if (user && !user.emailVerified) {\r\n    return sendEmailVerification(user);\r\n  }\r\n  throw new Error(\"User is already verified or not available\");\r\n};\r\n\r\n// Update user profile in Firestore with better error handling\r\nconst updateUserProfile = async (userId, data) => {\r\n  try {\r\n    const userRef = doc(db, \"users\", userId);\r\n    \r\n    // First check if the document exists\r\n    const docSnap = await getDoc(userRef);\r\n    \r\n    if (docSnap.exists()) {\r\n      await updateDoc(userRef, {\r\n        ...data,\r\n        updatedAt: new Date().toISOString()\r\n      });\r\n      return { success: true };\r\n    } else {\r\n      // Create the document if it doesn't exist\r\n      await setDoc(userRef, {\r\n        ...data,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      });\r\n      return { success: true };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error updating user profile:\", error);\r\n    return { \r\n      success: false, \r\n      error: error.message \r\n    };\r\n  }\r\n};\r\n\r\n// Check if email exists in the system with improved error handling\r\nconst checkEmailExists = async (email) => {\r\n  try {\r\n    const usersRef = collection(db, \"users\");\r\n    const q = query(usersRef, where(\"email\", \"==\", email));\r\n    const querySnapshot = await getDocs(q);\r\n    return !querySnapshot.empty;\r\n  } catch (error) {\r\n    console.error(\"Error checking email:\", error);\r\n    // Return false instead of throwing to prevent app crashes\r\n    return false;\r\n  }\r\n};\r\n\r\n// Count users by role with improved error handling\r\nconst countUsersByRole = async (role) => {\r\n  try {\r\n    const usersRef = collection(db, \"users\");\r\n    const q = query(usersRef, where(\"role\", \"==\", role));\r\n    const querySnapshot = await getDocs(q);\r\n    return querySnapshot.size;\r\n  } catch (error) {\r\n    console.error(\"Error counting users by role:\", error);\r\n    // Return 0 instead of throwing\r\n    return 0;\r\n  }\r\n};\r\n\r\n// Check admin registration status - improved with better error handling\r\nconst checkAdminRegistrationStatus = async (email) => {\r\n  try {\r\n    // Check if this specific email is already registered\r\n    const emailCheckQ = query(\r\n      collection(db, \"users\"), \r\n      where(\"email\", \"==\", email)\r\n    );\r\n    const emailQuerySnapshot = await getDocs(emailCheckQ);\r\n    \r\n    // If this admin is already registered (regardless of role), prevent duplicate registration\r\n    if (!emailQuerySnapshot.empty) {\r\n      return { \r\n        canRegister: false, \r\n        message: \"This email address is already registered in the system\" \r\n      };\r\n    }\r\n    \r\n    // Get all admin users\r\n    const adminQ = query(collection(db, \"users\"), where(\"role\", \"==\", \"admin\"));\r\n    const adminSnapshot = await getDocs(adminQ);\r\n    const adminCount = adminSnapshot.size;\r\n    \r\n    // If we have fewer than 2 admins, allow registration\r\n    if (adminCount < 2) {\r\n      return { canRegister: true, message: \"\" };\r\n    }\r\n    \r\n    // If we already have 2 admins, no more can register\r\n    return { \r\n      canRegister: false, \r\n      message: \"Maximum number of administrators (2) has been reached. Please contact system support.\" \r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error checking admin registration status:\", error);\r\n    // In case of error, allow registration and handle in next steps\r\n    return { canRegister: true, message: \"Could not verify administrator limits. Proceeding with registration.\" };\r\n  }\r\n};\r\n\r\n// Check if course has a class rep\r\nconst checkCourseHasRep = async (course) => {\r\n  try {\r\n    const usersRef = collection(db, \"users\");\r\n    const q = query(\r\n      usersRef, \r\n      where(\"role\", \"==\", \"class_rep\"),\r\n      where(\"course\", \"==\", course)\r\n    );\r\n    const querySnapshot = await getDocs(q);\r\n    return !querySnapshot.empty;\r\n  } catch (error) {\r\n    console.error(\"Error checking course rep:\", error);\r\n    // Return false instead of throwing\r\n    return false;\r\n  }\r\n};\r\n\r\n// Email validation functions\r\nconst isValidLecturerEmail = (email) => {\r\n  return email.endsWith('@tum.ac.ke') && !email.includes('@students.tum.ac.ke');\r\n};\r\n\r\nconst isValidStudentEmail = (email, course) => {\r\n  if (!course) return false;\r\n  \r\n  // Match format: COURSECODE/NUMBER/YEAR@students.tum.ac.ke\r\n  const studentEmailRegex = new RegExp(`^${course}\\\\/[0-9]+[A-Z]?\\\\/[0-9]{4}@students\\\\.tum\\\\.ac\\\\.ke$`, 'i');\r\n  return studentEmailRegex.test(email);\r\n};\r\n\r\n// Check admin count with improved error handling\r\nconst getAdminCount = async () => {\r\n  try {\r\n    const adminQuery = query(\r\n      collection(db, \"users\"),\r\n      where(\"role\", \"==\", \"admin\")\r\n    );\r\n    const adminSnapshot = await getDocs(adminQuery);\r\n    return adminSnapshot.size;\r\n  } catch (error) {\r\n    console.error(\"Error checking admin count:\", error);\r\n    return 0;\r\n  }\r\n};\r\n\r\n// Check if class rep exists for a specific course\r\nconst checkClassRepExists = async (course) => {\r\n  try {\r\n    const classRepQuery = query(\r\n      collection(db, \"users\"),\r\n      where(\"role\", \"==\", \"class_rep\"),\r\n      where(\"course\", \"==\", course)\r\n    );\r\n    const classRepSnapshot = await getDocs(classRepQuery);\r\n    return classRepSnapshot.size > 0;\r\n  } catch (error) {\r\n    console.error(\"Error checking class rep:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Validate email format based on role\r\nconst validateEmailByRole = async (email, role, department, course) => {\r\n  try {\r\n    if (!email || !role) {\r\n      return { \r\n        valid: false, \r\n        error: \"Email and role are required\" \r\n      };\r\n    }\r\n\r\n    const adminCount = await getAdminCount();\r\n\r\n    switch (role) {\r\n      case 'admin':\r\n        // Admin validation - check only admin count limit\r\n        if (adminCount >= 2) {\r\n          return { \r\n            valid: false, \r\n            error: \"Maximum number of administrators (2) already registered\" \r\n          };\r\n        }\r\n        return { valid: true, error: \"\" };\r\n          \r\n      case 'lecturer':\r\n        // Lecturer validation - must have university email\r\n        const lecturerPattern = /^[a-zA-Z0-9._%+-]+@tum\\.ac\\.ke$/;\r\n        if (lecturerPattern.test(email)) {\r\n          return { valid: true, error: \"\" };\r\n        } else {\r\n          return {\r\n            valid: false,\r\n            error: \"Lecturer email must be a valid university email (e.g., janedoe@tum.ac.ke)\"\r\n          };\r\n        }\r\n          \r\n      case 'class_rep':\r\n        // Class Rep validation\r\n        if (!department || !course) {\r\n          return {\r\n            valid: false,\r\n            error: \"Please select both department and course first\"\r\n          };\r\n        }\r\n          \r\n        const classRepExists = await checkClassRepExists(course);\r\n        if (classRepExists) {\r\n          return {\r\n            valid: false,\r\n            error: `A class representative for ${course} already exists`\r\n          };\r\n        }\r\n          \r\n        // Check email format: COURSECODE/NUMBER/YEAR@students.tum.ac.ke\r\n        const classRepPattern = new RegExp(`^${course}\\\\/[0-9]+[A-Z]?\\\\/[0-9]{4}@students\\\\.tum\\\\.ac\\\\.ke$`, 'i');\r\n        if (classRepPattern.test(email)) {\r\n          return { valid: true, error: \"\" };\r\n        } else {\r\n          return {\r\n            valid: false,\r\n            error: `Class rep email must follow the format: ${course}/STUDENTNUMBER/YEAR@students.tum.ac.ke`\r\n          };\r\n        }\r\n          \r\n      default:\r\n        return { valid: false, error: \"Invalid role selected\" };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error validating email:\", error);\r\n    return { valid: false, error: \"Error validating email. Please try again.\" };\r\n  }\r\n};\r\n\r\n// Create new user account with improved error handling and Firestore integration\r\nconst createNewUser = async (email, password, role, department, course) => {\r\n  try {\r\n    // First check if the user already exists\r\n    const emailExists = await checkEmailExists(email);\r\n    if (emailExists) {\r\n      return {\r\n        success: false,\r\n        message: \"This email is already registered. Please use a different email or login.\"\r\n      };\r\n    }\r\n    \r\n    // For admin role, check if we've reached the limit\r\n    if (role === 'admin') {\r\n      const adminStatus = await checkAdminRegistrationStatus(email);\r\n      if (!adminStatus.canRegister) {\r\n        return {\r\n          success: false,\r\n          message: adminStatus.message\r\n        };\r\n      }\r\n    }\r\n    \r\n    // Create user in Firebase Auth\r\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n    console.log(\"User created in Authentication:\", userCredential.user.uid);\r\n    \r\n    // Prepare user data for Firestore\r\n    const userData = {\r\n      email: userCredential.user.email,\r\n      role: role,\r\n      emailVerified: userCredential.user.emailVerified,\r\n      createdAt: new Date().toISOString(),\r\n      lastLogin: new Date().toISOString(),\r\n      approved: role === 'admin', // Automatically approve admins\r\n      // Add role-specific fields\r\n      ...(role === 'class_rep' && {\r\n        department: department,\r\n        course: course,\r\n      }),\r\n      ...(role === 'lecturer' && {\r\n        department: department,\r\n      })\r\n    };\r\n    \r\n    // Save user data to Firestore\r\n    await setDoc(doc(db, \"users\", userCredential.user.uid), userData);\r\n    console.log(\"User data saved to Firestore\");\r\n    \r\n    return {\r\n      success: true,\r\n      message: role === 'admin' \r\n        ? \"Admin account created successfully! You may now log in.\" \r\n        : \"Account created! Awaiting admin approval. You'll be notified once approved.\",\r\n      user: userCredential.user\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error creating new user:\", error);\r\n    let errorMessage = error.message;\r\n    \r\n    if (error.code === 'auth/email-already-in-use') {\r\n      errorMessage = \"This email is already registered. Please use a different email or login.\";\r\n    } else if (error.code === 'auth/invalid-email') {\r\n      errorMessage = \"Invalid email format. Please check and try again.\";\r\n    } else if (error.code === 'auth/weak-password') {\r\n      errorMessage = \"Password is too weak. Please use a stronger password.\";\r\n    }\r\n    \r\n    return {\r\n      success: false,\r\n      message: errorMessage,\r\n      error: error\r\n    };\r\n  }\r\n};\r\n\r\n// New function to sign in users with enhanced error handling\r\nconst signInUser = async (email, password) => {\r\n  try {\r\n    // Attempt to sign in with Firebase Auth\r\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n    console.log(\"User authenticated successfully:\", userCredential.user.uid);\r\n    \r\n    // Get the user's Firestore profile\r\n    const userDoc = await getDoc(doc(db, \"users\", userCredential.user.uid));\r\n    \r\n    if (!userDoc.exists()) {\r\n      console.warn(\"User not found in Firestore. Creating profile...\");\r\n      \r\n      // Create a basic profile if it doesn't exist\r\n      const basicProfile = {\r\n        email: userCredential.user.email,\r\n        emailVerified: userCredential.user.emailVerified,\r\n        role: \"unknown\",\r\n        createdAt: new Date().toISOString(),\r\n        lastLogin: new Date().toISOString(),\r\n        approved: false\r\n      };\r\n      \r\n      await setDoc(doc(db, \"users\", userCredential.user.uid), basicProfile);\r\n      \r\n      return {\r\n        success: true,\r\n        message: \"Logged in successfully, but profile is incomplete. Please contact an administrator.\",\r\n        user: {\r\n          ...userCredential.user,\r\n          ...basicProfile\r\n        }\r\n      };\r\n    }\r\n    \r\n    // Get the user data\r\n    const userData = userDoc.data();\r\n    \r\n    // Update last login timestamp\r\n    await updateDoc(doc(db, \"users\", userCredential.user.uid), {\r\n      lastLogin: new Date().toISOString()\r\n    });\r\n    \r\n    // Check if user is approved (all admins are auto-approved)\r\n    if (!userData.approved && userData.role !== 'admin') {\r\n      return {\r\n        success: false,\r\n        message: \"Your account is pending approval. Please check back later or contact an administrator.\",\r\n        user: null\r\n      };\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      message: \"Logged in successfully!\",\r\n      user: {\r\n        ...userCredential.user,\r\n        ...userData\r\n      }\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Login error:\", error);\r\n    \r\n    let errorMessage;\r\n    switch (error.code) {\r\n      case 'auth/user-not-found':\r\n      case 'auth/wrong-password':\r\n        errorMessage = \"Invalid email or password. Please try again.\";\r\n        break;\r\n      case 'auth/too-many-requests':\r\n        errorMessage = \"Too many unsuccessful login attempts. Please try again later or reset your password.\";\r\n        break;\r\n      case 'auth/user-disabled':\r\n        errorMessage = \"This account has been disabled. Please contact an administrator.\";\r\n        break;\r\n      default:\r\n        errorMessage = \"Failed to login. Please try again.\";\r\n    }\r\n    \r\n    return {\r\n      success: false,\r\n      message: errorMessage,\r\n      error: error\r\n    };\r\n  }\r\n};\r\n\r\n// Create a collection if it doesn't exist\r\nconst ensureCollectionExists = async (collectionName) => {\r\n  try {\r\n    // Add a dummy document and then delete it to ensure collection exists\r\n    const docRef = doc(collection(db, collectionName), 'dummy');\r\n    await setDoc(docRef, { dummy: true });\r\n    // No need to delete - collections with no documents still exist\r\n    return true;\r\n  } catch (error) {\r\n    console.error(`Error ensuring ${collectionName} collection exists:`, error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// NEW FUNCTIONS FOR DASHBOARD DATA SHARING BETWEEN ROLES\r\n\r\n// Get timetable entries for a lecturer based on their email\r\nconst getLecturerTimetable = async (lecturerEmail) => {\r\n  try {\r\n    if (!lecturerEmail) {\r\n      console.error(\"Lecturer email is required\");\r\n      return [];\r\n    }\r\n    \r\n    const timetableRef = collection(db, \"timetable\");\r\n    const q = query(timetableRef, where(\"lecturerEmail\", \"==\", lecturerEmail));\r\n    const querySnapshot = await getDocs(q);\r\n    \r\n    const classes = [];\r\n    querySnapshot.forEach((doc) => {\r\n      classes.push({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      });\r\n    });\r\n    \r\n    return classes;\r\n  } catch (error) {\r\n    console.error(\"Error fetching lecturer timetable:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Get timetable entries for a course\r\nconst getCourseTimetable = async (course) => {\r\n  try {\r\n    if (!course) {\r\n      console.error(\"Course code is required\");\r\n      return [];\r\n    }\r\n    \r\n    const timetableRef = collection(db, \"timetable\");\r\n    const q = query(timetableRef, where(\"course\", \"==\", course));\r\n    const querySnapshot = await getDocs(q);\r\n    \r\n    const classes = [];\r\n    querySnapshot.forEach((doc) => {\r\n      classes.push({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      });\r\n    });\r\n    \r\n    return classes;\r\n  } catch (error) {\r\n    console.error(\"Error fetching course timetable:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Get timetable entries for a department\r\nconst getDepartmentTimetable = async (department) => {\r\n  try {\r\n    if (!department) {\r\n      console.error(\"Department is required\");\r\n      return [];\r\n    }\r\n    \r\n    const timetableRef = collection(db, \"timetable\");\r\n    const q = query(timetableRef, where(\"department\", \"==\", department));\r\n    const querySnapshot = await getDocs(q);\r\n    \r\n    const classes = [];\r\n    querySnapshot.forEach((doc) => {\r\n      classes.push({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      });\r\n    });\r\n    \r\n    return classes;\r\n  } catch (error) {\r\n    console.error(\"Error fetching department timetable:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Subscribe to timetable updates for a lecturer\r\nconst subscribeLecturerTimetable = (lecturerEmail, callback) => {\r\n  if (!lecturerEmail) {\r\n    console.error(\"Lecturer email is required\");\r\n    return () => {};\r\n  }\r\n  \r\n  const timetableRef = collection(db, \"timetable\");\r\n  const q = query(timetableRef, where(\"lecturerEmail\", \"==\", lecturerEmail));\r\n  \r\n  return onSnapshot(q, (querySnapshot) => {\r\n    const classes = [];\r\n    querySnapshot.forEach((doc) => {\r\n      classes.push({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      });\r\n    });\r\n    callback(classes);\r\n  }, (error) => {\r\n    console.error(\"Error subscribing to lecturer timetable:\", error);\r\n    callback([]);\r\n  });\r\n};\r\n\r\n// Subscribe to timetable updates for a course\r\nconst subscribeCourseTimetable = (course, callback) => {\r\n  if (!course) {\r\n    console.error(\"Course code is required\");\r\n    return () => {};\r\n  }\r\n  \r\n  const timetableRef = collection(db, \"timetable\");\r\n  const q = query(timetableRef, where(\"course\", \"==\", course));\r\n  \r\n  return onSnapshot(q, (querySnapshot) => {\r\n    const classes = [];\r\n    querySnapshot.forEach((doc) => {\r\n      classes.push({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      });\r\n    });\r\n    callback(classes);\r\n  }, (error) => {\r\n    console.error(\"Error subscribing to course timetable:\", error);\r\n    callback([]);\r\n  });\r\n};\r\n\r\n// Get classes for today for any user type\r\nconst getTodayClasses = async (userType, userIdentifier) => {\r\n  try {\r\n    if (!userType || !userIdentifier) {\r\n      console.error(\"User type and identifier are required\");\r\n      return [];\r\n    }\r\n    \r\n    const today = new Date();\r\n    const startOfDay = new Date(today.setHours(0, 0, 0, 0)).toISOString();\r\n    const endOfDay = new Date(today.setHours(23, 59, 59, 999)).toISOString();\r\n    \r\n    let q;\r\n    const timetableRef = collection(db, \"timetable\");\r\n    \r\n    switch (userType) {\r\n      case 'lecturer':\r\n        // For lecturers, filter by their email\r\n        q = query(\r\n          timetableRef, \r\n          where(\"lecturerEmail\", \"==\", userIdentifier),\r\n          where(\"date\", \">=\", startOfDay),\r\n          where(\"date\", \"<=\", endOfDay)\r\n        );\r\n        break;\r\n      case 'class_rep':\r\n        // For class reps, filter by course\r\n        q = query(\r\n          timetableRef, \r\n          where(\"course\", \"==\", userIdentifier),\r\n          where(\"date\", \">=\", startOfDay),\r\n          where(\"date\", \"<=\", endOfDay)\r\n        );\r\n        break;\r\n      case 'admin':\r\n        // Admins can see all classes for today\r\n        q = query(\r\n          timetableRef,\r\n          where(\"date\", \">=\", startOfDay),\r\n          where(\"date\", \"<=\", endOfDay)\r\n        );\r\n        break;\r\n      default:\r\n        return [];\r\n    }\r\n    \r\n    const querySnapshot = await getDocs(q);\r\n    \r\n    const classes = [];\r\n    querySnapshot.forEach((doc) => {\r\n      classes.push({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      });\r\n    });\r\n    \r\n    return classes;\r\n  } catch (error) {\r\n    console.error(\"Error fetching today's classes:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Add a new class to the timetable\r\nconst addClassToTimetable = async (classData) => {\r\n  try {\r\n    if (!classData) {\r\n      return { success: false, message: \"Class data is required\" };\r\n    }\r\n    \r\n    // Ensure required fields are present\r\n    const requiredFields = [\"course\", \"lecturerEmail\", \"date\", \"startTime\", \"endTime\", \"room\"];\r\n    for (const field of requiredFields) {\r\n      if (!classData[field]) {\r\n        return { success: false, message: `${field} is required` };\r\n      }\r\n    }\r\n    \r\n    // Add additional metadata\r\n    const finalClassData = {\r\n      ...classData,\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n    \r\n    // Add to Firestore\r\n    const timetableRef = collection(db, \"timetable\");\r\n    const docRef = await setDoc(doc(timetableRef), finalClassData);\r\n    \r\n    return { success: true, message: \"Class added successfully\", id: docRef.id };\r\n  } catch (error) {\r\n    console.error(\"Error adding class to timetable:\", error);\r\n    return { success: false, message: error.message };\r\n  }\r\n};\r\n\r\n// Get all classes for the upcoming week\r\nconst getUpcomingWeekClasses = async (userType, userIdentifier) => {\r\n  try {\r\n    if (!userType || !userIdentifier) {\r\n      console.error(\"User type and identifier are required\");\r\n      return [];\r\n    }\r\n    \r\n    const today = new Date();\r\n    const startOfDay = new Date(today.setHours(0, 0, 0, 0)).toISOString();\r\n    const endOfWeek = new Date(today);\r\n    endOfWeek.setDate(endOfWeek.getDate() + 7);\r\n    const endOfWeekString = new Date(endOfWeek.setHours(23, 59, 59, 999)).toISOString();\r\n    \r\n    let q;\r\n    const timetableRef = collection(db, \"timetable\");\r\n    \r\n    switch (userType) {\r\n      case 'lecturer':\r\n        // For lecturers, filter by their email\r\n        q = query(\r\n          timetableRef, \r\n          where(\"lecturerEmail\", \"==\", userIdentifier),\r\n          where(\"date\", \">=\", startOfDay),\r\n          where(\"date\", \"<=\", endOfWeekString)\r\n        );\r\n        break;\r\n      case 'class_rep':\r\n        // For class reps, filter by course\r\n        q = query(\r\n          timetableRef, \r\n          where(\"course\", \"==\", userIdentifier),\r\n          where(\"date\", \">=\", startOfDay),\r\n          where(\"date\", \"<=\", endOfWeekString)\r\n        );\r\n        break;\r\n      case 'admin':\r\n        // Admins can see all classes for the week\r\n        q = query(\r\n          timetableRef,\r\n          where(\"date\", \">=\", startOfDay),\r\n          where(\"date\", \"<=\", endOfWeekString)\r\n        );\r\n        break;\r\n      default:\r\n        return [];\r\n    }\r\n    \r\n    const querySnapshot = await getDocs(q);\r\n    \r\n    const classes = [];\r\n    querySnapshot.forEach((doc) => {\r\n      classes.push({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      });\r\n    });\r\n    \r\n    return classes;\r\n  } catch (error) {\r\n    console.error(\"Error fetching upcoming week's classes:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport {\r\n  app,\r\n  auth,\r\n  db,\r\n  getCurrentUser,\r\n  signOutUser,\r\n  resendVerificationEmail,\r\n  updateUserProfile,\r\n  checkEmailExists,\r\n  countUsersByRole,\r\n  checkCourseHasRep,\r\n  checkAdminRegistrationStatus,\r\n  isValidLecturerEmail,\r\n  isValidStudentEmail,\r\n  getAdminCount,\r\n  checkClassRepExists,\r\n  validateEmailByRole,\r\n  createNewUser,\r\n  signInUser,\r\n  ensureCollectionExists,\r\n  // Export new functions\r\n  getLecturerTimetable,\r\n  getCourseTimetable,\r\n  getDepartmentTimetable,\r\n  subscribeLecturerTimetable,\r\n  subscribeCourseTimetable,\r\n  getTodayClasses,\r\n  addClassToTimetable,\r\n  getUpcomingWeekClasses\r\n};"]}