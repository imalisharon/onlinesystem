{"version":3,"sources":["firebaseConfig.js"],"names":["firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","db","browserSessionPersistence","error","console","initializeFirestore","testQuery","log","message","getCurrentUser","Promise","resolve","reject","unsubscribe","user","uid","userDoc","exists","userData","data","lastLogin","Date","toISOString","warn","basicUserData","email","role","emailVerified","createdAt","approved","signOutUser","success","resendVerificationEmail","Error","updateUserProfile","userId","userRef","docSnap","updatedAt","checkEmailExists","usersRef","q","querySnapshot","empty","countUsersByRole","size","checkAdminRegistrationStatus","emailCheckQ","emailQuerySnapshot","canRegister","adminQ","adminSnapshot","adminCount","checkCourseHasRep","course","isValidLecturerEmail","endsWith","includes","isValidStudentEmail","studentEmailRegex","RegExp","test","getAdminCount","adminQuery","checkClassRepExists","classRepQuery","classRepSnapshot","validateEmailByRole","department","valid","lecturerPattern","classRepExists","classRepPattern","createNewUser","password","emailExists","adminStatus","userCredential","errorMessage","code","signInUser","basicProfile","ensureCollectionExists","collectionName","docRef","dummy","getLecturerTimetable","lecturerEmail","timetableRef","classes","forEach","doc","push","id","getCourseTimetable","getDepartmentTimetable","subscribeLecturerTimetable","callback","subscribeCourseTimetable","getTodayClasses","userType","userIdentifier","today","startOfDay","setHours","endOfDay","addClassToTimetable","classData","requiredFields","field","finalClassData","getUpcomingWeekClasses","endOfWeek","setDate","getDate","endOfWeekString"],"mappings":"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","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { \r\n  getAuth, \r\n  setPersistence, \r\n  browserSessionPersistence,\r\n  onAuthStateChanged,\r\n  sendEmailVerification,\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n  signOut\r\n} from \"firebase/auth\";\r\nimport { \r\n  getFirestore, \r\n  collection, \r\n  query, \r\n  where, \r\n  getDocs, \r\n  doc,\r\n  getDoc,\r\n  setDoc,\r\n  updateDoc,\r\n  serverTimestamp,\r\n  onSnapshot\r\n} from \"firebase/firestore\";\r\n\r\n// Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAwruoIL8WpN7AzgAmNTW8ZYcZZny1qZs0\",\r\n  authDomain: \"tumcalendar-75b52.firebaseapp.com\",\r\n  projectId: \"tumcalendar-75b52\",\r\n  storageBucket: \"tumcalendar-75b52.appspot.com\",\r\n  messagingSenderId: \"606128397684\",\r\n  appId: \"1:606128397684:web:0fc57fde30a1cd2d1ee021\",\r\n  measurementId: \"G-5C1KWE2HH6\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst auth = getAuth(app);\r\nconst db = getFirestore(app);\r\n\r\n// Set authentication persistence to session\r\nsetPersistence(auth, browserSessionPersistence)\r\n  .catch((error) => {\r\n    console.error(\"Firebase persistence error:\", error);\r\n  });\r\n\r\n// Check if Firestore users collection exists and create it if needed\r\nconst initializeFirestore = async () => {\r\n  try {\r\n    // Try to get a sample user document to check if collection exists\r\n    const testQuery = query(collection(db, \"users\"), where(\"role\", \"==\", \"admin\"));\r\n    await getDocs(testQuery);\r\n    console.log(\"Firestore users collection is ready\");\r\n    return true;\r\n  } catch (error) {\r\n    console.log(\"Initializing Firestore connection:\", error.message);\r\n    // Don't treat this as an error since it might be first-time setup\r\n    // or security rules not allowing unauthenticated queries\r\n    return false;\r\n  }\r\n};\r\n\r\n// Initialize Firestore on app load\r\ninitializeFirestore();\r\n\r\n// Check user authentication status and Firestore profile with enhanced error handling\r\nconst getCurrentUser = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n      unsubscribe();\r\n      if (user) {\r\n        try {\r\n          // Get user profile from Firestore\r\n          const userDoc = await getDoc(doc(db, \"users\", user.uid));\r\n          \r\n          if (userDoc.exists()) {\r\n            // Combine auth user with Firestore data\r\n            const userData = userDoc.data();\r\n            console.log(\"User data retrieved from Firestore:\", userData);\r\n            \r\n            // Update last login timestamp\r\n            try {\r\n              await updateDoc(doc(db, \"users\", user.uid), {\r\n                lastLogin: new Date().toISOString()\r\n              });\r\n            } catch (updateError) {\r\n              console.warn(\"Could not update last login time:\", updateError);\r\n            }\r\n            \r\n            resolve({\r\n              ...user,\r\n              ...userData\r\n            });\r\n          } else {\r\n            console.warn(\"User exists in Auth but not in Firestore. Creating Firestore record...\");\r\n            \r\n            // Auto-create missing user document in Firestore\r\n            try {\r\n              const basicUserData = {\r\n                email: user.email,\r\n                role: \"unknown\", // Default role\r\n                emailVerified: user.emailVerified,\r\n                createdAt: new Date().toISOString(),\r\n                lastLogin: new Date().toISOString(),\r\n                approved: false // Default to unapproved\r\n              };\r\n              \r\n              await setDoc(doc(db, \"users\", user.uid), basicUserData);\r\n              console.log(\"Created missing user document in Firestore\");\r\n              \r\n              resolve({\r\n                ...user,\r\n                ...basicUserData\r\n              });\r\n            } catch (createError) {\r\n              console.error(\"Failed to create missing user document:\", createError);\r\n              resolve(user);\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error getting user profile:\", error);\r\n          resolve(user);\r\n        }\r\n      } else {\r\n        resolve(null);\r\n      }\r\n    }, reject);\r\n  });\r\n};\r\n\r\n// Sign out user\r\nconst signOutUser = async () => {\r\n  try {\r\n    await signOut(auth);\r\n    return { success: true, message: \"Logged out successfully\" };\r\n  } catch (error) {\r\n    console.error(\"Error signing out:\", error);\r\n    return { success: false, error: error.message };\r\n  }\r\n};\r\n\r\n// Helper function to resend verification email\r\nconst resendVerificationEmail = async (user) => {\r\n  if (user && !user.emailVerified) {\r\n    return sendEmailVerification(user);\r\n  }\r\n  throw new Error(\"User is already verified or not available\");\r\n};\r\n\r\n// Update user profile in Firestore with better error handling\r\nconst updateUserProfile = async (userId, data) => {\r\n  try {\r\n    const userRef = doc(db, \"users\", userId);\r\n    \r\n    // First check if the document exists\r\n    const docSnap = await getDoc(userRef);\r\n    \r\n    if (docSnap.exists()) {\r\n      await updateDoc(userRef, {\r\n        ...data,\r\n        updatedAt: new Date().toISOString()\r\n      });\r\n      return { success: true };\r\n    } else {\r\n      // Create the document if it doesn't exist\r\n      await setDoc(userRef, {\r\n        ...data,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      });\r\n      return { success: true };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error updating user profile:\", error);\r\n    return { \r\n      success: false, \r\n      error: error.message \r\n    };\r\n  }\r\n};\r\n\r\n// Check if email exists in the system with improved error handling\r\nconst checkEmailExists = async (email) => {\r\n  try {\r\n    const usersRef = collection(db, \"users\");\r\n    const q = query(usersRef, where(\"email\", \"==\", email));\r\n    const querySnapshot = await getDocs(q);\r\n    return !querySnapshot.empty;\r\n  } catch (error) {\r\n    console.error(\"Error checking email:\", error);\r\n    // Return false instead of throwing to prevent app crashes\r\n    return false;\r\n  }\r\n};\r\n\r\n// Count users by role with improved error handling\r\nconst countUsersByRole = async (role) => {\r\n  try {\r\n    const usersRef = collection(db, \"users\");\r\n    const q = query(usersRef, where(\"role\", \"==\", role));\r\n    const querySnapshot = await getDocs(q);\r\n    return querySnapshot.size;\r\n  } catch (error) {\r\n    console.error(\"Error counting users by role:\", error);\r\n    // Return 0 instead of throwing\r\n    return 0;\r\n  }\r\n};\r\n\r\n// Check admin registration status - improved with better error handling\r\nconst checkAdminRegistrationStatus = async (email) => {\r\n  try {\r\n    // Check if this specific email is already registered\r\n    const emailCheckQ = query(\r\n      collection(db, \"users\"), \r\n      where(\"email\", \"==\", email)\r\n    );\r\n    const emailQuerySnapshot = await getDocs(emailCheckQ);\r\n    \r\n    // If this admin is already registered (regardless of role), prevent duplicate registration\r\n    if (!emailQuerySnapshot.empty) {\r\n      return { \r\n        canRegister: false, \r\n        message: \"This email address is already registered in the system\" \r\n      };\r\n    }\r\n    \r\n    // Get all admin users\r\n    const adminQ = query(collection(db, \"users\"), where(\"role\", \"==\", \"admin\"));\r\n    const adminSnapshot = await getDocs(adminQ);\r\n    const adminCount = adminSnapshot.size;\r\n    \r\n    // If we have fewer than 2 admins, allow registration\r\n    if (adminCount < 2) {\r\n      return { canRegister: true, message: \"\" };\r\n    }\r\n    \r\n    // If we already have 2 admins, no more can register\r\n    return { \r\n      canRegister: false, \r\n      message: \"Maximum number of administrators (2) has been reached. Please contact system support.\" \r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error checking admin registration status:\", error);\r\n    // In case of error, allow registration and handle in next steps\r\n    return { canRegister: true, message: \"Could not verify administrator limits. Proceeding with registration.\" };\r\n  }\r\n};\r\n\r\n// Check if course has a class rep\r\nconst checkCourseHasRep = async (course) => {\r\n  try {\r\n    const usersRef = collection(db, \"users\");\r\n    const q = query(\r\n      usersRef, \r\n      where(\"role\", \"==\", \"class_rep\"),\r\n      where(\"course\", \"==\", course)\r\n    );\r\n    const querySnapshot = await getDocs(q);\r\n    return !querySnapshot.empty;\r\n  } catch (error) {\r\n    console.error(\"Error checking course rep:\", error);\r\n    // Return false instead of throwing\r\n    return false;\r\n  }\r\n};\r\n\r\n// Email validation functions\r\nconst isValidLecturerEmail = (email) => {\r\n  return email.endsWith('@tum.ac.ke') && !email.includes('@students.tum.ac.ke');\r\n};\r\n\r\nconst isValidStudentEmail = (email, course) => {\r\n  if (!course) return false;\r\n  \r\n  // Match format: COURSECODE/NUMBER/YEAR@students.tum.ac.ke\r\n  const studentEmailRegex = new RegExp(`^${course}\\\\/[0-9]+[A-Z]?\\\\/[0-9]{4}@students\\\\.tum\\\\.ac\\\\.ke$`, 'i');\r\n  return studentEmailRegex.test(email);\r\n};\r\n\r\n// Check admin count with improved error handling\r\nconst getAdminCount = async () => {\r\n  try {\r\n    const adminQuery = query(\r\n      collection(db, \"users\"),\r\n      where(\"role\", \"==\", \"admin\")\r\n    );\r\n    const adminSnapshot = await getDocs(adminQuery);\r\n    return adminSnapshot.size;\r\n  } catch (error) {\r\n    console.error(\"Error checking admin count:\", error);\r\n    return 0;\r\n  }\r\n};\r\n\r\n// Check if class rep exists for a specific course\r\nconst checkClassRepExists = async (course) => {\r\n  try {\r\n    const classRepQuery = query(\r\n      collection(db, \"users\"),\r\n      where(\"role\", \"==\", \"class_rep\"),\r\n      where(\"course\", \"==\", course)\r\n    );\r\n    const classRepSnapshot = await getDocs(classRepQuery);\r\n    return classRepSnapshot.size > 0;\r\n  } catch (error) {\r\n    console.error(\"Error checking class rep:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Validate email format based on role\r\nconst validateEmailByRole = async (email, role, department, course) => {\r\n  try {\r\n    if (!email || !role) {\r\n      return { \r\n        valid: false, \r\n        error: \"Email and role are required\" \r\n      };\r\n    }\r\n\r\n    const adminCount = await getAdminCount();\r\n\r\n    switch (role) {\r\n      case 'admin':\r\n        // Admin validation - check only admin count limit\r\n        if (adminCount >= 2) {\r\n          return { \r\n            valid: false, \r\n            error: \"Maximum number of administrators (2) already registered\" \r\n          };\r\n        }\r\n        return { valid: true, error: \"\" };\r\n          \r\n      case 'lecturer':\r\n        // Lecturer validation - must have university email\r\n        const lecturerPattern = /^[a-zA-Z0-9._%+-]+@tum\\.ac\\.ke$/;\r\n        if (lecturerPattern.test(email)) {\r\n          return { valid: true, error: \"\" };\r\n        } else {\r\n          return {\r\n            valid: false,\r\n            error: \"Lecturer email must be a valid university email (e.g., janedoe@tum.ac.ke)\"\r\n          };\r\n        }\r\n          \r\n      case 'class_rep':\r\n        // Class Rep validation\r\n        if (!department || !course) {\r\n          return {\r\n            valid: false,\r\n            error: \"Please select both department and course first\"\r\n          };\r\n        }\r\n          \r\n        const classRepExists = await checkClassRepExists(course);\r\n        if (classRepExists) {\r\n          return {\r\n            valid: false,\r\n            error: `A class representative for ${course} already exists`\r\n          };\r\n        }\r\n          \r\n        // Check email format: COURSECODE/NUMBER/YEAR@students.tum.ac.ke\r\n        const classRepPattern = new RegExp(`^${course}\\\\/[0-9]+[A-Z]?\\\\/[0-9]{4}@students\\\\.tum\\\\.ac\\\\.ke$`, 'i');\r\n        if (classRepPattern.test(email)) {\r\n          return { valid: true, error: \"\" };\r\n        } else {\r\n          return {\r\n            valid: false,\r\n            error: `Class rep email must follow the format: ${course}/STUDENTNUMBER/YEAR@students.tum.ac.ke`\r\n          };\r\n        }\r\n          \r\n      default:\r\n        return { valid: false, error: \"Invalid role selected\" };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error validating email:\", error);\r\n    return { valid: false, error: \"Error validating email. Please try again.\" };\r\n  }\r\n};\r\n\r\n// Create new user account with improved error handling and Firestore integration\r\nconst createNewUser = async (email, password, role, department, course) => {\r\n  try {\r\n    // First check if the user already exists\r\n    const emailExists = await checkEmailExists(email);\r\n    if (emailExists) {\r\n      return {\r\n        success: false,\r\n        message: \"This email is already registered. Please use a different email or login.\"\r\n      };\r\n    }\r\n    \r\n    // For admin role, check if we've reached the limit\r\n    if (role === 'admin') {\r\n      const adminStatus = await checkAdminRegistrationStatus(email);\r\n      if (!adminStatus.canRegister) {\r\n        return {\r\n          success: false,\r\n          message: adminStatus.message\r\n        };\r\n      }\r\n    }\r\n    \r\n    // Create user in Firebase Auth\r\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n    console.log(\"User created in Authentication:\", userCredential.user.uid);\r\n    \r\n    // Prepare user data for Firestore\r\n    const userData = {\r\n      email: userCredential.user.email,\r\n      role: role,\r\n      emailVerified: userCredential.user.emailVerified,\r\n      createdAt: new Date().toISOString(),\r\n      lastLogin: new Date().toISOString(),\r\n      approved: role === 'admin', // Automatically approve admins\r\n      // Add role-specific fields\r\n      ...(role === 'class_rep' && {\r\n        department: department,\r\n        course: course,\r\n      }),\r\n      ...(role === 'lecturer' && {\r\n        department: department,\r\n      })\r\n    };\r\n    \r\n    // Save user data to Firestore\r\n    await setDoc(doc(db, \"users\", userCredential.user.uid), userData);\r\n    console.log(\"User data saved to Firestore\");\r\n    \r\n    return {\r\n      success: true,\r\n      message: role === 'admin' \r\n        ? \"Admin account created successfully! You may now log in.\" \r\n        : \"Account created! Awaiting admin approval. You'll be notified once approved.\",\r\n      user: userCredential.user\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error creating new user:\", error);\r\n    let errorMessage = error.message;\r\n    \r\n    if (error.code === 'auth/email-already-in-use') {\r\n      errorMessage = \"This email is already registered. Please use a different email or login.\";\r\n    } else if (error.code === 'auth/invalid-email') {\r\n      errorMessage = \"Invalid email format. Please check and try again.\";\r\n    } else if (error.code === 'auth/weak-password') {\r\n      errorMessage = \"Password is too weak. Please use a stronger password.\";\r\n    }\r\n    \r\n    return {\r\n      success: false,\r\n      message: errorMessage,\r\n      error: error\r\n    };\r\n  }\r\n};\r\n\r\n// New function to sign in users with enhanced error handling\r\nconst signInUser = async (email, password) => {\r\n  try {\r\n    // Attempt to sign in with Firebase Auth\r\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n    console.log(\"User authenticated successfully:\", userCredential.user.uid);\r\n    \r\n    // Get the user's Firestore profile\r\n    const userDoc = await getDoc(doc(db, \"users\", userCredential.user.uid));\r\n    \r\n    if (!userDoc.exists()) {\r\n      console.warn(\"User not found in Firestore. Creating profile...\");\r\n      \r\n      // Create a basic profile if it doesn't exist\r\n      const basicProfile = {\r\n        email: userCredential.user.email,\r\n        emailVerified: userCredential.user.emailVerified,\r\n        role: \"unknown\",\r\n        createdAt: new Date().toISOString(),\r\n        lastLogin: new Date().toISOString(),\r\n        approved: false\r\n      };\r\n      \r\n      await setDoc(doc(db, \"users\", userCredential.user.uid), basicProfile);\r\n      \r\n      return {\r\n        success: true,\r\n        message: \"Logged in successfully, but profile is incomplete. Please contact an administrator.\",\r\n        user: {\r\n          ...userCredential.user,\r\n          ...basicProfile\r\n        }\r\n      };\r\n    }\r\n    \r\n    // Get the user data\r\n    const userData = userDoc.data();\r\n    \r\n    // Update last login timestamp\r\n    await updateDoc(doc(db, \"users\", userCredential.user.uid), {\r\n      lastLogin: new Date().toISOString()\r\n    });\r\n    \r\n    // Check if user is approved (all admins are auto-approved)\r\n    if (!userData.approved && userData.role !== 'admin') {\r\n      return {\r\n        success: false,\r\n        message: \"Your account is pending approval. Please check back later or contact an administrator.\",\r\n        user: null\r\n      };\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      message: \"Logged in successfully!\",\r\n      user: {\r\n        ...userCredential.user,\r\n        ...userData\r\n      }\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Login error:\", error);\r\n    \r\n    let errorMessage;\r\n    switch (error.code) {\r\n      case 'auth/user-not-found':\r\n      case 'auth/wrong-password':\r\n        errorMessage = \"Invalid email or password. Please try again.\";\r\n        break;\r\n      case 'auth/too-many-requests':\r\n        errorMessage = \"Too many unsuccessful login attempts. Please try again later or reset your password.\";\r\n        break;\r\n      case 'auth/user-disabled':\r\n        errorMessage = \"This account has been disabled. Please contact an administrator.\";\r\n        break;\r\n      default:\r\n        errorMessage = \"Failed to login. Please try again.\";\r\n    }\r\n    \r\n    return {\r\n      success: false,\r\n      message: errorMessage,\r\n      error: error\r\n    };\r\n  }\r\n};\r\n\r\n// Create a collection if it doesn't exist\r\nconst ensureCollectionExists = async (collectionName) => {\r\n  try {\r\n    // Add a dummy document and then delete it to ensure collection exists\r\n    const docRef = doc(collection(db, collectionName), 'dummy');\r\n    await setDoc(docRef, { dummy: true });\r\n    // No need to delete - collections with no documents still exist\r\n    return true;\r\n  } catch (error) {\r\n    console.error(`Error ensuring ${collectionName} collection exists:`, error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// NEW FUNCTIONS FOR DASHBOARD DATA SHARING BETWEEN ROLES\r\n\r\n// Get timetable entries for a lecturer based on their email\r\nconst getLecturerTimetable = async (lecturerEmail) => {\r\n  try {\r\n    if (!lecturerEmail) {\r\n      console.error(\"Lecturer email is required\");\r\n      return [];\r\n    }\r\n    \r\n    const timetableRef = collection(db, \"timetable\");\r\n    const q = query(timetableRef, where(\"lecturerEmail\", \"==\", lecturerEmail));\r\n    const querySnapshot = await getDocs(q);\r\n    \r\n    const classes = [];\r\n    querySnapshot.forEach((doc) => {\r\n      classes.push({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      });\r\n    });\r\n    \r\n    return classes;\r\n  } catch (error) {\r\n    console.error(\"Error fetching lecturer timetable:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Get timetable entries for a course\r\nconst getCourseTimetable = async (course) => {\r\n  try {\r\n    if (!course) {\r\n      console.error(\"Course code is required\");\r\n      return [];\r\n    }\r\n    \r\n    const timetableRef = collection(db, \"timetable\");\r\n    const q = query(timetableRef, where(\"course\", \"==\", course));\r\n    const querySnapshot = await getDocs(q);\r\n    \r\n    const classes = [];\r\n    querySnapshot.forEach((doc) => {\r\n      classes.push({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      });\r\n    });\r\n    \r\n    return classes;\r\n  } catch (error) {\r\n    console.error(\"Error fetching course timetable:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Get timetable entries for a department\r\nconst getDepartmentTimetable = async (department) => {\r\n  try {\r\n    if (!department) {\r\n      console.error(\"Department is required\");\r\n      return [];\r\n    }\r\n    \r\n    const timetableRef = collection(db, \"timetable\");\r\n    const q = query(timetableRef, where(\"department\", \"==\", department));\r\n    const querySnapshot = await getDocs(q);\r\n    \r\n    const classes = [];\r\n    querySnapshot.forEach((doc) => {\r\n      classes.push({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      });\r\n    });\r\n    \r\n    return classes;\r\n  } catch (error) {\r\n    console.error(\"Error fetching department timetable:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Subscribe to timetable updates for a lecturer\r\nconst subscribeLecturerTimetable = (lecturerEmail, callback) => {\r\n  if (!lecturerEmail) {\r\n    console.error(\"Lecturer email is required\");\r\n    return () => {};\r\n  }\r\n  \r\n  const timetableRef = collection(db, \"timetable\");\r\n  const q = query(timetableRef, where(\"lecturerEmail\", \"==\", lecturerEmail));\r\n  \r\n  return onSnapshot(q, (querySnapshot) => {\r\n    const classes = [];\r\n    querySnapshot.forEach((doc) => {\r\n      classes.push({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      });\r\n    });\r\n    callback(classes);\r\n  }, (error) => {\r\n    console.error(\"Error subscribing to lecturer timetable:\", error);\r\n    callback([]);\r\n  });\r\n};\r\n\r\n// Subscribe to timetable updates for a course\r\nconst subscribeCourseTimetable = (course, callback) => {\r\n  if (!course) {\r\n    console.error(\"Course code is required\");\r\n    return () => {};\r\n  }\r\n  \r\n  const timetableRef = collection(db, \"timetable\");\r\n  const q = query(timetableRef, where(\"course\", \"==\", course));\r\n  \r\n  return onSnapshot(q, (querySnapshot) => {\r\n    const classes = [];\r\n    querySnapshot.forEach((doc) => {\r\n      classes.push({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      });\r\n    });\r\n    callback(classes);\r\n  }, (error) => {\r\n    console.error(\"Error subscribing to course timetable:\", error);\r\n    callback([]);\r\n  });\r\n};\r\n\r\n// Get classes for today for any user type\r\nconst getTodayClasses = async (userType, userIdentifier) => {\r\n  try {\r\n    if (!userType || !userIdentifier) {\r\n      console.error(\"User type and identifier are required\");\r\n      return [];\r\n    }\r\n    \r\n    const today = new Date();\r\n    const startOfDay = new Date(today.setHours(0, 0, 0, 0)).toISOString();\r\n    const endOfDay = new Date(today.setHours(23, 59, 59, 999)).toISOString();\r\n    \r\n    let q;\r\n    const timetableRef = collection(db, \"timetable\");\r\n    \r\n    switch (userType) {\r\n      case 'lecturer':\r\n        // For lecturers, filter by their email\r\n        q = query(\r\n          timetableRef, \r\n          where(\"lecturerEmail\", \"==\", userIdentifier),\r\n          where(\"date\", \">=\", startOfDay),\r\n          where(\"date\", \"<=\", endOfDay)\r\n        );\r\n        break;\r\n      case 'class_rep':\r\n        // For class reps, filter by course\r\n        q = query(\r\n          timetableRef, \r\n          where(\"course\", \"==\", userIdentifier),\r\n          where(\"date\", \">=\", startOfDay),\r\n          where(\"date\", \"<=\", endOfDay)\r\n        );\r\n        break;\r\n      case 'admin':\r\n        // Admins can see all classes for today\r\n        q = query(\r\n          timetableRef,\r\n          where(\"date\", \">=\", startOfDay),\r\n          where(\"date\", \"<=\", endOfDay)\r\n        );\r\n        break;\r\n      default:\r\n        return [];\r\n    }\r\n    \r\n    const querySnapshot = await getDocs(q);\r\n    \r\n    const classes = [];\r\n    querySnapshot.forEach((doc) => {\r\n      classes.push({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      });\r\n    });\r\n    \r\n    return classes;\r\n  } catch (error) {\r\n    console.error(\"Error fetching today's classes:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Add a new class to the timetable\r\nconst addClassToTimetable = async (classData) => {\r\n  try {\r\n    if (!classData) {\r\n      return { success: false, message: \"Class data is required\" };\r\n    }\r\n    \r\n    // Ensure required fields are present\r\n    const requiredFields = [\"course\", \"lecturerEmail\", \"date\", \"startTime\", \"endTime\", \"room\"];\r\n    for (const field of requiredFields) {\r\n      if (!classData[field]) {\r\n        return { success: false, message: `${field} is required` };\r\n      }\r\n    }\r\n    \r\n    // Add additional metadata\r\n    const finalClassData = {\r\n      ...classData,\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n    \r\n    // Add to Firestore\r\n    const timetableRef = collection(db, \"timetable\");\r\n    const docRef = await setDoc(doc(timetableRef), finalClassData);\r\n    \r\n    return { success: true, message: \"Class added successfully\", id: docRef.id };\r\n  } catch (error) {\r\n    console.error(\"Error adding class to timetable:\", error);\r\n    return { success: false, message: error.message };\r\n  }\r\n};\r\n\r\n// Get all classes for the upcoming week\r\nconst getUpcomingWeekClasses = async (userType, userIdentifier) => {\r\n  try {\r\n    if (!userType || !userIdentifier) {\r\n      console.error(\"User type and identifier are required\");\r\n      return [];\r\n    }\r\n    \r\n    const today = new Date();\r\n    const startOfDay = new Date(today.setHours(0, 0, 0, 0)).toISOString();\r\n    const endOfWeek = new Date(today);\r\n    endOfWeek.setDate(endOfWeek.getDate() + 7);\r\n    const endOfWeekString = new Date(endOfWeek.setHours(23, 59, 59, 999)).toISOString();\r\n    \r\n    let q;\r\n    const timetableRef = collection(db, \"timetable\");\r\n    \r\n    switch (userType) {\r\n      case 'lecturer':\r\n        // For lecturers, filter by their email\r\n        q = query(\r\n          timetableRef, \r\n          where(\"lecturerEmail\", \"==\", userIdentifier),\r\n          where(\"date\", \">=\", startOfDay),\r\n          where(\"date\", \"<=\", endOfWeekString)\r\n        );\r\n        break;\r\n      case 'class_rep':\r\n        // For class reps, filter by course\r\n        q = query(\r\n          timetableRef, \r\n          where(\"course\", \"==\", userIdentifier),\r\n          where(\"date\", \">=\", startOfDay),\r\n          where(\"date\", \"<=\", endOfWeekString)\r\n        );\r\n        break;\r\n      case 'admin':\r\n        // Admins can see all classes for the week\r\n        q = query(\r\n          timetableRef,\r\n          where(\"date\", \">=\", startOfDay),\r\n          where(\"date\", \"<=\", endOfWeekString)\r\n        );\r\n        break;\r\n      default:\r\n        return [];\r\n    }\r\n    \r\n    const querySnapshot = await getDocs(q);\r\n    \r\n    const classes = [];\r\n    querySnapshot.forEach((doc) => {\r\n      classes.push({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      });\r\n    });\r\n    \r\n    return classes;\r\n  } catch (error) {\r\n    console.error(\"Error fetching upcoming week's classes:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport {\r\n  app,\r\n  auth,\r\n  db,\r\n  getCurrentUser,\r\n  signOutUser,\r\n  resendVerificationEmail,\r\n  updateUserProfile,\r\n  checkEmailExists,\r\n  countUsersByRole,\r\n  checkCourseHasRep,\r\n  checkAdminRegistrationStatus,\r\n  isValidLecturerEmail,\r\n  isValidStudentEmail,\r\n  getAdminCount,\r\n  checkClassRepExists,\r\n  validateEmailByRole,\r\n  createNewUser,\r\n  signInUser,\r\n  ensureCollectionExists,\r\n  // Export new functions\r\n  getLecturerTimetable,\r\n  getCourseTimetable,\r\n  getDepartmentTimetable,\r\n  subscribeLecturerTimetable,\r\n  subscribeCourseTimetable,\r\n  getTodayClasses,\r\n  addClassToTimetable,\r\n  getUpcomingWeekClasses\r\n};"],"file":"firebaseConfig.dev.js"}